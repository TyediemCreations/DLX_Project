import java.util.*;
import java.io.*;

public class review{
	

	public static void main(String[] args){
		/*
		LinkedList ll = new LinkedList(10);
		ll.addFirst(20);
		ll.addLast(30);
		ll.removeFirst();
		//ll.printList();
		//System.out.println("Hello, World");

		BST tree = new BST(8,"dummy");
		tree.insert(10);
		tree.insert(3);
		tree.insert(1);
		tree.insert(14);
		tree.insert(13);
		tree.insert(6);
		tree.insert(7);
		tree.insert(4);

		tree.delete(8);

		//tree.printTree();
		Stack myStack = new Stack();
		myStack.push(10);
		myStack.push(20);
		myStack.push(30);
		myStack.pop();
		//myStack.printStack();

		Queue myQueue = new Queue();
		myQueue.enqueue(10);
		myQueue.enqueue(20);
		myQueue.enqueue(30);
		myQueue.dequeue();
		//myQueue.printQueue();

		Graph myGraph = new Graph(1);
		myGraph.addEdge(1,2);
		myGraph.addEdge(1,3);
		myGraph.addEdge(1,4);
		myGraph.addEdge(2,5);
		myGraph.addEdge(2,6);
		myGraph.addEdge(4,7);
		myGraph.addEdge(4,8);
		myGraph.addEdge(5,9);
		myGraph.addEdge(5,10);
		myGraph.addEdge(7,11);
		myGraph.addEdge(7,12);
		myGraph.addEdge(13,14);
		myGraph.addEdge(13,1);
		myGraph.BFS();
		myGraph.printGraph();
		*/

		/*
		Matrix matrix = new Matrix(6,7);
		matrix.set(0,0);
		matrix.set(0,3);
		matrix.set(0,6);
		matrix.set(1,0);
		matrix.set(1,3);
		matrix.set(2,3);
		matrix.set(2,4);
		matrix.set(2,6);
		matrix.set(3,2);
		matrix.set(3,4);
		matrix.set(3,5);
		matrix.set(4,1);
		matrix.set(4,2);
		matrix.set(4,5);
		matrix.set(4,6);
		matrix.set(5,1);
		matrix.set(5,6);
		*/

		/*
		Matrix matrix = new Matrix(11,7);
		matrix.set(0,0);
		matrix.set(0,3);
		matrix.set(0,6);
		matrix.set(1,0);
		matrix.set(1,3);
		matrix.set(2,3);
		matrix.set(2,4);
		matrix.set(2,6);
		matrix.set(3,2);
		matrix.set(3,4);
		matrix.set(3,5);
		matrix.set(4,1);
		matrix.set(4,2);
		matrix.set(4,5);
		matrix.set(4,6);
		matrix.set(5,1);
		matrix.set(5,6);
		matrix.set(6,0);
		matrix.set(6,1);
		matrix.set(6,2);
		matrix.set(6,3);
		matrix.set(6,4);
		matrix.set(6,5);
		matrix.set(6,6);
		matrix.set(7,1);
		matrix.set(7,6);
		matrix.set(8,0);
		matrix.set(8,3);
		matrix.set(9,1);
		matrix.set(10,0);
		matrix.set(10,2);
		matrix.set(10,5);
		//matrix.printMatrix();
		//System.out.println();

		//Vector <Integer> rows = new Vector<Integer>(),cols = new Vector<Integer>();
		
		//matrix.deleteAll(rows,cols);
		//Matrix copy = matrix.matrixCopy();
		//copy.deleteRow(1);
		//copy.deleteColumn(1);

		

		//copy.printMatrix();
		
		//matrix.algorithmX(matrix);
		//matrix.printSolutions();
		*/
		/*
		ColumnHeader header1 = new ColumnHeader(1);
		ColumnHeader header2 = new ColumnHeader(2);
		ColumnHeader header3 = new ColumnHeader(3);

		header1.right = header2;
		header2.left = header1;
		header2.right = header3;
		header3.left = header2;

		header2.removeHeader();
		header2.restoreHeader();
		header3.removeHeader();
		header3.restoreHeader();
		header1.printHeaders();
		*/
		
		boolean [][] matrix = new boolean[6][7];
		/*
		boolean [][] matrix = new boolean[3][2];

		matrix[0][0] = false;
		matrix[0][1] = true;
		matrix[1][0] = true;
		matrix[1][1] = false;
		matrix[2][0] = true;
		matrix[2][1] = true;
		
			01
			10
			11
		*/
		for (int row=0;row<matrix.length;row++){
			for (int col=0;col<matrix[row].length;col++){
				matrix[row][col] = false;
			}
		}
		/*
		matrix[0][2] = true;
		matrix[0][4] = true;
		matrix[0][5] = true;

		matrix[1][0] = true;
		matrix[1][3] = true;
		matrix[1][6] = true;

		matrix[2][1] = true;
		matrix[2][2] = true;
		matrix[2][5] = true;

		matrix[3][0] = true;
		matrix[3][3] = true;

		matrix[4][1] = true;
		matrix[4][6] = true;

		matrix[5][3] = true;
		matrix[5][4] = true;
		matrix[5][6] = true;
		/*
		0010110
		1001001
		0110010
		1001000
		0100001
		0001101

		solution as per 'algorithmX':
		(3,0,4)

		0010110
		1001000
		0100001
		
		
		*/
		/**/
		matrix[0][0] = true;
		matrix[0][3] = true;
		matrix[0][6] = true;

		matrix[1][0] = true;
		matrix[1][3] = true;

		matrix[2][3] = true;
		matrix[2][4] = true;
		matrix[2][6] = true;

		matrix[3][2] = true;
		matrix[3][4] = true;
		matrix[3][5] = true;

		matrix[4][1] = true;
		matrix[4][2] = true;
		matrix[4][5] = true;
		matrix[4][6] = true;

		matrix[5][1] = true;
		matrix[5][6] = true;
		/*
		1001001
		1001000
		0001101
		0010110
		0110011
		0100001

		solution as per algorithmX:
		(1,3,5)
		1001000
		0010110
		0100001
		*/

		/*
		matrix[1][1] = true;
		matrix[2][0] = true;
		matrix[3][0] = true;
		matrix[4][0] = true;
		matrix[4][1] = true;
		/*
		00
		01
		10
		10
		11

		solution as per algorithmX: 
		(1,2)
		(1,3)
		(4)

		01
		10

		01
		10

		11
		*/

		System.out.println("\nHello, world\n");
		
		//String fileName = "DLX/sudoEx.txt";
		//String fileName = "DLX/sudoEx_empty.txt";
		//String fileName = "DLX/sudoEx_completed.txt";
		String fileName = "Examples/sudoEx_test.txt";
		//String fileName = "DLX/sudoEx_veryBig.txt";
		//String fileName = "DLX/sudoEx_tiny.txt";
		//String fileName = "DLX/sudoEx_race.txt";

		String line = "";

		int row = 9;	//originally 9
		int col = 9;	//originally 9
		int[][] intMatrix = new int[row][col];
		
		//for (int i=0;i<row;i++){
		//	for (int j=0;j<col;j++){
		//		intMatrix[i][j] = 0;
		//	}
		//}

		try{
			FileReader fileReader = new FileReader(fileName);

			BufferedReader bufferedReader = new BufferedReader(fileReader);

			int rowCounter = 0;
			while((line = bufferedReader.readLine()) != null && rowCounter<row){
				int colCounter = 0;
				//System.out.println(line);
				for (int i=0;i<line.length()&&colCounter<col;i++){
					char c = line.charAt(i);
					if (c >= '0' && c <= '9'){
						intMatrix[rowCounter][colCounter] = Character.getNumericValue(c);
						colCounter++;
						if (colCounter>=col)
							rowCounter++;
					}else if (c >= 'A' && c<= 'Z'){
						intMatrix[rowCounter][colCounter] = (int) c - 55;
						colCounter++;
						if (colCounter>=col)
							rowCounter++;
					}
				}
				
			}

			bufferedReader.close();
		}
		catch(FileNotFoundException ex){
			System.out.println("Unable to open file '" + fileName +"'");
		}
		catch(IOException ex){
			System.out.println("Error reading file '" + fileName+"'");
		}

		Puzzle myPuzzle = new Puzzle(intMatrix);
		//myPuzzle.printBinary();
		/*
		for (int i=0;i<row;i++){
			String str = "";
			for (int j=0;j<col;j++){
				str += intMatrix[i][j];
			}
			System.out.println(str);			
		}
		*/

		/**/
		//DLX links = new DLX(matrix);
		//DLX links = new DLX(myPuzzle.getBinary());

		Date date_init = new Date();
		System.out.println("\nBeginning...\n");
		//myPuzzle.solvePuzzle();
		//for (int i=0;i<100;i++){
		//	myPuzzle.printSudoku(myPuzzle.createPuzzle());
		//	System.out.println("-----");
		//}
		//myPuzzle.printSudoku(myPuzzle.createPuzzle(myPuzzle.interpretSolution(myPuzzle.solvePuzzle().get(0))));
		
		//myPuzzle.printSudoku(myPuzzle.createPuzzle());
		//myPuzzle.createPuzzles(myPuzzle.solvePuzzle());
		/*
		int[] dif = myPuzzle.getDifficulty(intMatrix);
		//String dif = myPuzzle.getDifficulty(intMatrix,"");
		//System.out.println(dif);
		myPuzzle.printDifficulty(dif);
		myPuzzle.printSudoku(intMatrix);
		/**/
		/*
		myPuzzle.printSudoku(intMatrix);
		//int[][] incomplete = myPuzzle.createPuzzlePlus(intMatrix,0);
		int[][] incomplete = myPuzzle.createPuzzlePlusPlus(intMatrix,0);
		myPuzzle.printSudoku(incomplete);
		/**/
		/*
		int[] difCounter = new int[5];
		int numPuz = 100;
		for (int i=0;i<numPuz;i++){
			int [][] newPuzzle = myPuzzle.newCompletedPuzzle();
			myPuzzle.printSudoku(newPuzzle);
			System.out.println("");
			//int [][] incomplete = myPuzzle.createPuzzle(newPuzzle,0);
			int [][] incomplete = myPuzzle.createPuzzlePlus(newPuzzle,0);
			//int[][] incomplete = myPuzzle.createPuzzlePlusPlus(newPuzzle,0);
			myPuzzle.printSudoku(incomplete);
			int [][] copy = myPuzzle.copySudoku(incomplete);

			int[] dif = myPuzzle.getDifficulty(copy);
			//difCounter = myPuzzle.add(difCounter,dif);
			myPuzzle.printDifficulty(dif);
			
			//Vector<Vector<Integer>> solutions = myPuzzle.solvePuzzle(incomplete,true);
			//for (int sol=0;sol<solutions.size();sol++){
			//	System.out.println("\nSolution#"+sol);
			//	myPuzzle.printSudoku(myPuzzle.interpretSolution(solutions.get(sol)));}
			
			System.out.println("\n-----\n");
		}
		//System.out.println(difCounter);
		//System.out.println("Average: ");
		//int[] avgDif = myPuzzle.avg(difCounter,numPuz);
		//System.out.println(avgDif);
		//myPuzzle.printDifficulty(avgDif);
		/**/
		/*

		Vector<Vector<Integer>> solutions = myPuzzle.solvePuzzle();
		for (int i=0;i<solutions.size();i++){
		System.out.println("\nSolution#"+i);
		myPuzzle.printSudoku(myPuzzle.interpretSolution(solutions.get(i)));
		}
		//links.printLinks();
		//links.printNode();
		//links.removeColumn(links.exampleLink());
		//System.out.println("");
		//links.returnColumn(links.exampleLink());
		//links.updateCount();
		//System.out.println("Column chosen: "+links.chooseColumn().strFormatLink());
		
		//links.algorithmX();
		//links.printLinksV2();
		System.out.println("\n\n");
		//links.printLinks();

		//links.printSolutions();
		System.out.println("");
		//for (int i=0;i<links.getSolutions().size();i++){
		//	System.out.println("\nSolution #"+(i+1)+"\n");
		//	myPuzzle.interpretSolution(links.getSolutions().get(i));
		//}
		/**/
		PosValues[][] possible = new PosValues[9][9];
		for (int i=0;i<9;i++){
			for (int j=0;j<9;j++){
				possible[i][j] = new PosValues(9);
				if (intMatrix[i][j]==0)
					possible[i][j].setPos(i,j,intMatrix);
				else
					possible[i][j].set(intMatrix[i][j]);
			}
		}
		System.out.println(possible[0][8].uniqueVal(0,8,possible));
		Date date_fin = new Date();
		String time_dif = Double.toString((date_fin.getTime()-date_init.getTime())/1000.0);
		System.out.println("Time elapsed since beginning: "+time_dif+" seconds");
		
		System.out.println("\nGoodbye, all\n");
		
	}	
}

/*
Difficulty levels (for 9x9 sudoku built from 'createNewPuzzle'; averaged from 100 puzzles)
	createPuzzle(puzzle, 1) => 0 difficulty
	createPuzzle(puzzle, 0) => 6 'hard', 52 'challenge'
	createPuzzle(puzzle,0.5) = > 3 'challenge', 9 'medium'
	createPuzzle(puzzle,0.25) => 3 'hard' 51 'challenge'
	createPuzzle(puzzle,0.75) => 3 'medium', 28 'easy'
	createPuzzle(puzzle,0.3775) => 66 'challenge' 1 'medium'
*/

/*
Current times for (complete, incomplete, & getDifficulty): 
	100 4x4 sudoku in 0.412 seconds
	100 9x9 sudoku in 6.997-9.311 seconds
	1 16x16 sudoku in 27.594-37.254 seconds (minus getDifficulty)
		(*updated*) same constraints, now 5.805-37.019 seconds (...it's a big range, but tends to stay closer to the 15-20-ish seconds)
		(*updated*) for one test case, 'createPuzzle'=>40.479 seconds
					   'createPuzzlePlus'=>26.574 seconds

To do (for sudoku stuff):
	finish testing 'getdifficulty' stuff


	-get 'size' stuff figured out. I think (think) returnColumn is working as it should now, see about having removeColumn only decrement when it's 'posed to





	-(fixed, perhaps not optimal, but I just updateCount whenever choosing column) (update: for whatever reason, replacing 'reset' with 'updateCount' works just peachy-keen-fine) prevent having to use 'reset' in DLX
		-create a copy of h&friends in DLX constructor; 
		 create equality function for DL;
		 determine if h&friends are degrading with use
		(equality done; links are supposedly unchanged; with reset- 0.232s; with reset commented out- 20.348s)

	-figure out how to make created puzzles more purdy.
	-figure out how to pause/resume algorithmX
	-moar optimizations to speed up mass puzzle creation

	-(fixed) Issue when running 'createPuzzles'; after about 4 consecutive puzzle creations starts interpreting puzzles as having no solutions, and thus making no alterations to the completed puzzles.
		-I fixed it. it was the tempCounter- wasn't getting zeroed, reached its limit and subsequent puzzles wouldn't find solutions
	-(done I think, but could doubtless be more efficient) use info from integer matrix in the creation of the binary matrix 
		(either remove rows from binary matrix accordingly [hrmmm...]
		or pass the relevant rows into algorithmX as a partial solution [eyyyy]
			note: the latter would require updating DLX to make sure it 
			removes the relevant rows&columns *before* running algorithmX
	)
*/


/*
	(*Update:*) can now (08-05-17) create 100 complete+incomplete puzzles in 4.920-5.254 seconds (avg 5.0255 seconds)
	(*Update:*) can now (07-05-17) create 10 complete+incomplete puzzles in 4.694 seconds
	Note: 	-around 2.4-2.8 seconds for 'naive createPuzzle'. That's, y'know, not very good.
		-around 14.398 seconds for 'complex createPuzzle' (calls createPuzzle recursively after every successful number removal- yielded the same result as the naive implementation)

	updated 'algorithmXPlus' to return removed links after completion, and moved
	the DLX object 'links' outside of 'solvePuzzle' so as to avoid constantly recreating it
		new times: 0.216-0.411 seconds for the 'naive' puzzle (avg about 0.2-0.3),
			       (run on 'sudoEx_completed'. on 'sudoEx', it took 8.25 seconds (since got it down to 1.658s); however only 1.101 when run on the completed version of 'sudoEx') 
			   8.086-8.615 seconds for the 'complex' puzzle 
			   (they remain the same actual output)
		
*/
